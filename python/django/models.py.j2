{%- set m = yaml.load('''
name: ModelData
description: ''
key:
  - name
fields:
  name:
''' ) %}

{%- macro render_field(name, descriptor) %}
{%- if not descriptor -%}
models.CharField(max_length=255, help_text=_("{{ name.capitalize() }}"))
{%- elif descriptor == 'int' or descriptor.type == 'int' -%}
models.IntegerField(help_text=_("{{ name.capitalize() }}"))
{%- elif descriptor == 'bool' or descriptor.type == 'bool' -%}
models.BooleanField(help_text=_("{{ name.capitalize() }}"))
{%- else -%}
models.CharField(max_length=255, help_text=_("{{ name.capitalize() }}"))
{%- endif %}
{%- endmacro -%}

from django.db import models
from django.utils.encoding import python_2_unicode_compatible
from django.utils.translation import ugettext_lazy as _


class {{ m.name }}Manager(models.Manager):
    def get_by_natural_key(self, {{ m.key | join(', ') }}):
        return self.get(
            {% for field in m.key %}{{ field }}={{ field }}, {% endfor %}
        )


@python_2_unicode_compatible
class {{ m.name }}(models.Model):
    """{{ m.description }}"""
    {%- for field, descriptor in m.fields.items() %}
    {{ field }} = {{ render_field(field, descriptor) }}
    {%- endfor %}

    objects = {{ m.name }}Manager()

    class Meta:
        unique_together = (
            ('{{ m.key | join("', '") }}',),
        )

    def __str__(self):
        return self.name

    def natural_key(self):
        return {% for field in m.key %}self.{{ field }}, {% endfor %}

